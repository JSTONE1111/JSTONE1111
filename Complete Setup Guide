# 🚀 Complete Auto-Release Pipeline Setup

## 📋 Overview

This system provides **fully automated**:
- ✅ PR auto-labeling from branch names
- ✅ PR title auto-formatting to Conventional Commits
- ✅ Automatic version bumping (semver)
- ✅ Changelog generation with emoji sections
- ✅ GitHub Releases with detailed notes
- ✅ PR notification when changes are released

---

## 🎯 Setup Instructions

### 1. Create GitHub Workflows

Copy these files to your repo:

```
.github/
├── workflows/
│   ├── auto-label.yml          # Auto-label and format PRs
│   ├── release-changelog.yml   # Auto-release on main merge
│   └── commitlint.yml          # Validate commit messages (from earlier)
```

### 2. Create Configuration Files

**`.versionrc.json`** (in repo root):
```json
{
  "types": [
    { "type": "feat", "section": "✨ Features" },
    { "type": "fix", "section": "🐛 Bug Fixes" },
    { "type": "perf", "section": "⚡ Performance" },
    { "type": "refactor", "section": "♻️ Refactoring" },
    { "type": "docs", "section": "📚 Documentation" },
    { "type": "test", "section": "🧪 Tests" },
    { "type": "build", "section": "📦 Build System" },
    { "type": "ci", "section": "🔧 CI/CD" },
    { "type": "chore", "section": "🔨 Chores" }
  ]
}
```

**`package.json`** (add if not exists):
```json
{
  "name": "your-project",
  "version": "1.0.0",
  "private": true
}
```

### 3. Configure GitHub Settings

#### Required Permissions:
Go to **Settings → Actions → General → Workflow permissions**:
- ✅ Enable "Read and write permissions"
- ✅ Enable "Allow GitHub Actions to create and approve pull requests"

#### Branch Protection (Recommended):
Go to **Settings → Branches → Add rule** for `main`:
- ✅ Require status checks (commitlint)
- ✅ Require PR before merging
- ✅ Enable squash merging (use PR title)

---

## 🌳 Branch Naming Convention

Developers should create branches following this pattern:

| Branch Pattern | Auto Label | Commit Type | Example |
|---------------|------------|-------------|---------|
| `feat/*` | `feature` | `feat:` | `feat/user-auth` |
| `fix/*` | `bug` | `fix:` | `fix/login-crash` |
| `docs/*` | `documentation` | `docs:` | `docs/api-guide` |
| `refactor/*` | `refactor` | `refactor:` | `refactor/auth-logic` |
| `test/*` | `testing` | `test:` | `test/unit-coverage` |
| `perf/*` | `performance` | `perf:` | `perf/query-speed` |
| `chore/*` | `chore` | `chore:` | `chore/update-deps` |
| `ci/*` | `ci-cd` | `ci:` | `ci/add-tests` |
| `style/*` | `style` | `style:` | `style/formatting` |
| `build/*` | `build` | `build:` | `build/webpack-config` |

---

## 🔄 Complete Workflow Example

### Step 1: Developer Creates Branch
```bash
git checkout -b feat/add-login-page
# Make changes
git add .
git commit -m "wip: working on login"  # Can be anything!
git push origin feat/add-login-page
```

### Step 2: Open PR
- **GitHub Action automatically**:
  - ✅ Adds `feature` label
  - ✅ Formats title to `feat: add login page`
  - ✅ Comments explaining the change

### Step 3: Review & Merge
- **Reviewer approves**
- **Merge using "Squash and merge"**
- **Squashed commit** = `feat: add login page` ✅ (from PR title)

### Step 4: Automated Release 🎉
When merged to `main`, GitHub Actions automatically:

1. **Analyzes commits** since last release
2. **Determines version bump**:
   - `feat:` → Minor bump (1.0.0 → 1.1.0)
   - `fix:` → Patch bump (1.1.0 → 1.1.1)
   - `BREAKING CHANGE:` → Major bump (1.1.1 → 2.0.0)
3. **Generates CHANGELOG.md**:
   ```markdown
   ## [1.1.0] - 2025-10-01
   
   ### ✨ Features
   - add login page (#42)
   
   ### 🐛 Bug Fixes
   - resolve crash on empty input (#41)
   ```
4. **Creates Git tag** `v1.1.0`
5. **Publishes GitHub Release** with notes
6. **Comments on merged PRs** to notify contributors

---

## 📊 What Gets Generated

### CHANGELOG.md
```markdown
# Changelog

## [1.2.0] (2025-10-01)

### ✨ Features
* add user authentication (#42) ([a1b2c3d](link))
* implement dark mode (#45) ([d4e5f6g](link))

### 🐛 Bug Fixes
* resolve login redirect issue (#43) ([g7h8i9j](link))
* fix memory leak in dashboard (#44) ([j0k1l2m](link))

### 📚 Documentation
* update API documentation (#46) ([m3n4o5p](link))
```

### GitHub Release Page
- **Title**: v1.2.0
- **Body**: Formatted changelog
- **Assets**: Auto-generated by GitHub
- **Linked**: All PRs and commits clickable

---

## 🎯 Version Bumping Logic

| Commit Type | Version Change | Example |
|-------------|---------------|---------|
| `fix:` | Patch | 1.0.0 → 1.0.1 |
| `feat:` | Minor | 1.0.1 → 1.1.0 |
| `feat!:` or `BREAKING CHANGE:` | Major | 1.1.0 → 2.0.0 |
| `chore:`, `docs:`, etc. | No bump | - |

**Special Cases**:
- First release: Creates `1.0.0`
- Only chores/docs: Creates patch bump
- Multiple types: Uses highest priority (major > minor > patch)

---

## 🔧 Troubleshooting

### Labels Not Appearing?
Check: Settings → Actions → General → Enable "Read and write permissions"

### Release Not Triggering?
- Ensure `package.json` exists with `version` field
- Check workflow runs in Actions tab
- Verify branch protection isn't blocking pushes

### Changelog Empty?
- Ensure commits since last tag follow Conventional Commits
- Check `.versionrc.json` is in repo root
- Run `npx standard-version --dry-run` locally to debug

### Version Not Bumping?
- Verify at least one `feat:` or `fix:` commit exists
- Check if `package.json` version is synced with latest tag
- Look for errors in Actions logs

---

## 🚀 Advanced Customization

### Custom Emojis
Edit `.versionrc.json` `types` sections to change emojis.

### Skip CI for Releases
Add to release workflow:
```yaml
- name: Push changes
  run: |
    git push --follow-tags origin main
  env:
    SKIP_CI: true
```

### Pre-release Versions
For `develop` branch:
```yaml
npx standard-version --prerelease alpha
# Creates: 1.1.0-alpha.0
```

### Monorepo Support
Use `lerna-changelog` or `conventional-changelog-lerna` instead.

---

## 📝 Summary

**Zero-touch release pipeline**:
1. Branch name = PR label
2. PR label = Commit type
3. Commit type = Version bump
4. Version bump = Changelog + Release
5. Release = Notification to contributors

**Your job**: Write code. Everything else is automated. 🎉