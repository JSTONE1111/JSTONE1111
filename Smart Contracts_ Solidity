// ============================================================================
// 🔷 SMART CONTRACTS - SOLIDITY
// ============================================================================

// ============================================================================
// FILE: hardhat.config.js
// ============================================================================

/*
require("@nomicfoundation/hardhat-toolbox");
require("dotenv").config();

module.exports = {
  solidity: {
    version: "0.8.20",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200
      }
    }
  },
  networks: {
    hardhat: {
      chainId: 31337
    },
    localhost: {
      url: "http://127.0.0.1:8545"
    },
    mumbai: {
      url: `https://polygon-mumbai.infura.io/v3/${process.env.INFURA_PROJECT_ID}`,
      accounts: [process.env.PRIVATE_KEY],
      chainId: 80001,
      gasPrice: 20000000000
    },
    polygon: {
      url: `https://polygon-mainnet.infura.io/v3/${process.env.INFURA_PROJECT_ID}`,
      accounts: [process.env.PRIVATE_KEY],
      chainId: 137,
      gasPrice: 50000000000
    },
    ethereum: {
      url: `https://mainnet.infura.io/v3/${process.env.INFURA_PROJECT_ID}`,
      accounts: [process.env.PRIVATE_KEY],
      chainId: 1
    }
  },
  etherscan: {
    apiKey: {
      polygon: process.env.POLYGONSCAN_API_KEY,
      polygonMumbai: process.env.POLYGONSCAN_API_KEY,
      mainnet: process.env.ETHERSCAN_API_KEY
    }
  },
  paths: {
    sources: "./contracts",
    tests: "./test",
    cache: "./cache",
    artifacts: "./artifacts"
  }
};
*/

// ============================================================================
// FILE: contracts/Token.sol
// ============================================================================

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

/**
 * @title PlatformToken
 * @dev ERC20 Token with burn, pause, and ownership features
 */
contract PlatformToken is ERC20, ERC20Burnable, Ownable, Pausable {
    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10**18; // 1 billion tokens
    
    mapping(address => bool) public blacklisted;
    
    event Blacklisted(address indexed account);
    event Unblacklisted(address indexed account);
    
    constructor() ERC20("Platform Token", "PLAT") Ownable(msg.sender) {
        _mint(msg.sender, 100_000_000 * 10**18); // Mint 100M tokens initially
    }
    
    /**
     * @dev Mint new tokens (only owner, respects max supply)
     */
    function mint(address to, uint256 amount) external onlyOwner {
        require(totalSupply() + amount <= MAX_SUPPLY, "Exceeds max supply");
        _mint(to, amount);
    }
    
    /**
     * @dev Pause token transfers
     */
    function pause() external onlyOwner {
        _pause();
    }
    
    /**
     * @dev Unpause token transfers
     */
    function unpause() external onlyOwner {
        _unpause();
    }
    
    /**
     * @dev Blacklist an address
     */
    function blacklist(address account) external onlyOwner {
        blacklisted[account] = true;
        emit Blacklisted(account);
    }
    
    /**
     * @dev Remove from blacklist
     */
    function unblacklist(address account) external onlyOwner {
        blacklisted[account] = false;
        emit Unblacklisted(account);
    }
    
    /**
     * @dev Override transfer to add pause and blacklist checks
     */
    function _update(
        address from,
        address to,
        uint256 value
    ) internal override whenNotPaused {
        require(!blacklisted[from], "Sender is blacklisted");
        require(!blacklisted[to], "Recipient is blacklisted");
        super._update(from, to, value);
    }
}

// ============================================================================
// FILE: contracts/NFT.sol
// ============================================================================

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/**
 * @title PlatformNFT
 * @dev ERC721 NFT with minting, burning, and URI storage
 */
contract PlatformNFT is ERC721, ERC721URIStorage, ERC721Burnable, Ownable {
    using Counters for Counters.Counter;
    
    Counters.Counter private _tokenIdCounter;
    
    uint256 public constant MAX_SUPPLY = 10000;
    uint256 public mintPrice = 0.01 ether;
    
    mapping(uint256 => string) private _tokenURIs;
    
    event Minted(address indexed to, uint256 indexed tokenId, string uri);
    
    constructor() ERC721("Platform NFT", "PNFT") Ownable(msg.sender) {}
    
    /**
     * @dev Mint new NFT (public)
     */
    function mint(string memory uri) external payable {
        require(msg.value >= mintPrice, "Insufficient payment");
        require(_tokenIdCounter.current() < MAX_SUPPLY, "Max supply reached");
        
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        
        _safeMint(msg.sender, tokenId);
        _setTokenURI(tokenId, uri);
        
        emit Minted(msg.sender, tokenId, uri);
    }
    
    /**
     * @dev Mint NFT to specific address (only owner)
     */
    function mintTo(address to, string memory uri) external onlyOwner {
        require(_tokenIdCounter.current() < MAX_SUPPLY, "Max supply reached");
        
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);
        
        emit Minted(to, tokenId, uri);
    }
    
    /**
     * @dev Set mint price (only owner)
     */
    function setMintPrice(uint256 newPrice) external onlyOwner {
        mintPrice = newPrice;
    }
    
    /**
     * @dev Withdraw contract balance (only owner)
     */
    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }
    
    /**
     * @dev Get total minted
     */
    function totalMinted() external view returns (uint256) {
        return _tokenIdCounter.current();
    }
    
    // Override required functions
    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
    
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}

// ============================================================================
// FILE: contracts/Staking.sol
// ============================================================================

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title TokenStaking
 * @dev Stake tokens and earn rewards
 */
contract TokenStaking is Ownable, ReentrancyGuard {
    IERC20 public stakingToken;
    IERC20 public rewardToken;
    
    uint256 public rewardRate = 100; // 100 tokens per day per token staked
    uint256 public constant REWARD_PRECISION = 1e18;
    
    struct Stake {
        uint256 amount;
        uint256 timestamp;
        uint256 rewardDebt;
    }
    
    mapping(address => Stake) public stakes;
    uint256 public totalStaked;
    
    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event RewardClaimed(address indexed user, uint256 amount);
    
    constructor(address _stakingToken, address _rewardToken) Ownable(msg.sender) {
        stakingToken = IERC20(_stakingToken);
        rewardToken = IERC20(_rewardToken);
    }
    
    /**
     * @dev Stake tokens
     */
    function stake(uint256 amount) external nonReentrant {
        require(amount > 0, "Cannot stake 0");
        
        // Claim pending rewards first
        if (stakes[msg.sender].amount > 0) {
            _claimReward();
        }
        
        stakingToken.transferFrom(msg.sender, address(this), amount);
        
        stakes[msg.sender].amount += amount;
        stakes[msg.sender].timestamp = block.timestamp;
        totalStaked += amount;
        
        emit Staked(msg.sender, amount);
    }
    
    /**
     * @dev Unstake tokens
     */
    function unstake(uint256 amount) external nonReentrant {
        require(amount > 0, "Cannot unstake 0");
        require(stakes[msg.sender].amount >= amount, "Insufficient stake");
        
        // Claim rewards first
        _claimReward();
        
        stakes[msg.sender].amount -= amount;
        totalStaked -= amount;
        
        stakingToken.transfer(msg.sender, amount);
        
        emit Unstaked(msg.sender, amount);
    }
    
    /**
     * @dev Claim rewards
     */
    function claimReward() external nonReentrant {
        _claimReward();
    }
    
    /**
     * @dev Internal claim rewards
     */
    function _claimReward() internal {
        uint256 reward = calculateReward(msg.sender);
        
        if (reward > 0) {
            stakes[msg.sender].rewardDebt = block.timestamp;
            rewardToken.transfer(msg.sender, reward);
            
            emit RewardClaimed(msg.sender, reward);
        }
    }
    
    /**
     * @dev Calculate pending rewards
     */
    function calculateReward(address user) public view returns (uint256) {
        Stake memory userStake = stakes[user];
        
        if (userStake.amount == 0) {
            return 0;
        }
        
        uint256 stakingDuration = block.timestamp - 
            (userStake.rewardDebt == 0 ? userStake.timestamp : userStake.rewardDebt);
        
        return (userStake.amount * rewardRate * stakingDuration) / 
            (1 days * REWARD_PRECISION);
    }
    
    /**
     * @dev Set reward rate (only owner)
     */
    function setRewardRate(uint256 newRate) external onlyOwner {
        rewardRate = newRate;
    }
    
    /**
     * @dev Emergency withdraw (only owner)
     */
    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {
        IERC20(token).transfer(owner(), amount);
    }
}

// ============================================================================
// FILE: scripts/deploy.js
// ============================================================================

/*
const hre = require("hardhat");

async function main() {
  console.log("🚀 Deploying contracts...\n");

  // Get deployer account
  const [deployer] = await hre.ethers.getSigners();
  console.log("Deploying with account:", deployer.address);
  console.log("Account balance:", (await deployer.provider.getBalance(deployer.address)).toString());

  // Deploy Token
  console.log("\n📄 Deploying PlatformToken...");
  const Token = await hre.ethers.getContractFactory("PlatformToken");
  const token = await Token.deploy();
  await token.waitForDeployment();
  const tokenAddress = await token.getAddress();
  console.log("✅ PlatformToken deployed to:", tokenAddress);

  // Deploy NFT
  console.log("\n🎨 Deploying PlatformNFT...");
  const NFT = await hre.ethers.getContractFactory("PlatformNFT");
  const nft = await NFT.deploy();
  await nft.waitForDeployment();
  const nftAddress = await nft.getAddress();
  console.log("✅ PlatformNFT deployed to:", nftAddress);

  // Deploy Staking
  console.log("\n💰 Deploying TokenStaking...");
  const Staking = await hre.ethers.getContractFactory("TokenStaking");
  const staking = await Staking.deploy(tokenAddress, tokenAddress); // Using same token for staking and rewards
  await staking.waitForDeployment();
  const stakingAddress = await staking.getAddress();
  console.log("✅ TokenStaking deployed to:", stakingAddress);

  // Summary
  console.log("\n============================================");
  console.log("📋 Deployment Summary");
  console.log("============================================");
  console.log("PlatformToken:", tokenAddress);
  console.log("PlatformNFT:", nftAddress);
  console.log("TokenStaking:", stakingAddress);
  console.log("============================================\n");

  // Verify on Etherscan/Polygonscan
  if (hre.network.name !== "hardhat" && hre.network.name !== "localhost") {
    console.log("⏳ Waiting for block confirmations...");
    await token.deploymentTransaction().wait(5);
    
    console.log("\n🔍 Verifying contracts...");
    try {
      await hre.run("verify:verify", {
        address: tokenAddress,
        constructorArguments: []
      });
      console.log("✅ PlatformToken verified");
    } catch (error) {
      console.log("❌ Error verifying PlatformToken:", error.message);
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
*/

// ============================================================================
// END OF SMART CONTRACTS
// ============================================================================